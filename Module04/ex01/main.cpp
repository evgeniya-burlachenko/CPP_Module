/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: skelly <skelly@student.21-school.ru>       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/02/03 20:05:01 by skelly            #+#    #+#             */
/*   Updated: 2022/02/16 00:34:35 by skelly           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "Animal.hpp"
#include "Cat.hpp"
#include "Dog.hpp"
#include "Brain.hpp"

// Deep Copy
// Глубокая копия копирует все поля и создает копии динамически выделенной памяти,
// на которые указывают поля. Глубокая копия возникает,
// когда объект копируется вместе с объектами, к которым он относится.
// Мелкая копия
// Мелкая копия - это бит-мудрая копия объекта. Создается новый объект, 
// который имеет точную копию значений в исходном объекте. 
// Если какое-либо из полей объекта является ссылкой на другие объекты, 
// копируются только ссылочные адреса, т.е. Копируется только адрес памяти, 
// а не фактические объекты.
int main()
{
	{
		const Animal *j = new Dog();
		const Animal *i = new Cat();
		delete j; //should not create a leak
		delete i;
		
		std::cout << std::endl <<  "*********** deep copy ************************************" << std::endl << std::endl;
		std::cout << "*********** Cat ************************************" << std::endl;
	}

	{	 
		Animal* array[8];

		int i;

		for (i = 0; i < 4; i++)
			array[i] = new Cat();
		std::cout << "*********** Dog ************************************" << std::endl;
		for (i = 4; i < 8; i++)
			array[i] = new Dog();
		std::cout << "********** Makesound ********************************" << std::endl;
		for (i = 0; i < 8; i++)
			array[i]->makeSound();
		std::cout << "********** Close ***********************************" << std::endl;
		for (i = 0; i < 8; i++)
			delete array[i];
		std::cout << "****************************************************" << std::endl;
	}
	return 0;
}
